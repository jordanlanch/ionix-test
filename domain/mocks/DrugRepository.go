// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/jordanlanch/ionix-test/domain"
	mock "github.com/stretchr/testify/mock"
)

// DrugRepository is an autogenerated mock type for the DrugRepository type
type DrugRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, drug
func (_m *DrugRepository) Create(ctx context.Context, drug *domain.Drug) error {
	ret := _m.Called(ctx, drug)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Drug) error); ok {
		r0 = rf(ctx, drug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *DrugRepository) Delete(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields: ctx, pagination
func (_m *DrugRepository) FindAll(ctx context.Context, pagination *domain.Pagination) ([]*domain.Drug, error) {
	ret := _m.Called(ctx, pagination)

	var r0 []*domain.Drug
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Pagination) ([]*domain.Drug, error)); ok {
		return rf(ctx, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Pagination) []*domain.Drug); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Drug)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Pagination) error); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *DrugRepository) FindByID(ctx context.Context, id int) (*domain.Drug, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Drug
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*domain.Drug, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *domain.Drug); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Drug)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, drug
func (_m *DrugRepository) Update(ctx context.Context, id int, drug *domain.Drug) error {
	ret := _m.Called(ctx, id, drug)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *domain.Drug) error); ok {
		r0 = rf(ctx, id, drug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDrugRepository creates a new instance of DrugRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDrugRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *DrugRepository {
	mock := &DrugRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
