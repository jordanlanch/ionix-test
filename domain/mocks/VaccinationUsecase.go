// Code generated by mockery v2.35.4. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/jordanlanch/ionix-test/domain"
	mock "github.com/stretchr/testify/mock"
)

// VaccinationUsecase is an autogenerated mock type for the VaccinationUsecase type
type VaccinationUsecase struct {
	mock.Mock
}

// CreateVaccination provides a mock function with given fields: ctx, vac
func (_m *VaccinationUsecase) CreateVaccination(ctx context.Context, vac *domain.Vaccination) error {
	ret := _m.Called(ctx, vac)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Vaccination) error); ok {
		r0 = rf(ctx, vac)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteVaccination provides a mock function with given fields: ctx, id
func (_m *VaccinationUsecase) DeleteVaccination(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllVaccinations provides a mock function with given fields: ctx, pagination
func (_m *VaccinationUsecase) GetAllVaccinations(ctx context.Context, pagination *domain.Pagination) ([]*domain.Vaccination, error) {
	ret := _m.Called(ctx, pagination)

	var r0 []*domain.Vaccination
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Pagination) ([]*domain.Vaccination, error)); ok {
		return rf(ctx, pagination)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Pagination) []*domain.Vaccination); ok {
		r0 = rf(ctx, pagination)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Vaccination)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Pagination) error); ok {
		r1 = rf(ctx, pagination)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVaccinationById provides a mock function with given fields: ctx, id
func (_m *VaccinationUsecase) GetVaccinationById(ctx context.Context, id int) (*domain.Vaccination, error) {
	ret := _m.Called(ctx, id)

	var r0 *domain.Vaccination
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*domain.Vaccination, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *domain.Vaccination); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Vaccination)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateVaccination provides a mock function with given fields: ctx, id, vac
func (_m *VaccinationUsecase) UpdateVaccination(ctx context.Context, id int, vac *domain.Vaccination) error {
	ret := _m.Called(ctx, id, vac)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, *domain.Vaccination) error); ok {
		r0 = rf(ctx, id, vac)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewVaccinationUsecase creates a new instance of VaccinationUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVaccinationUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *VaccinationUsecase {
	mock := &VaccinationUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
